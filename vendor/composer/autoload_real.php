<?php

// autoload_real.php @generated by Composer

class ComposerAutoloaderInite076afe45cb086ab2da8c82077e278c9 {

    private static $loader;

    public static function loadClassLoader($class) {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    public static function getLoader() {
        //查看静态成员是否已经保存loader实例
        if (null !== self::$loader) {
            return self::$loader;
        }
        //临时使用本类的loadClassLoader作为自动加载函数
        spl_autoload_register(array('ComposerAutoloaderInite076afe45cb086ab2da8c82077e278c9', 'loadClassLoader'), true, true);
        //得到真正的loader
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        //解除临时自动加载函数
        spl_autoload_unregister(array('ComposerAutoloaderInite076afe45cb086ab2da8c82077e278c9', 'loadClassLoader'));
        
        //$map = array('phpDocumentor' => array($vendorDir . '/phpdocumentor/reflection-docblock/src'),...)
        $map = require __DIR__ . '/autoload_namespaces.php';
        foreach ($map as $namespace => $path) {
            $loader->set($namespace, $path);
        }
        //$map = array('XdgBaseDir\\' => array($vendorDir . '/dnoegel/php-xdg-base-dir/src'),...)
        $map = require __DIR__ . '/autoload_psr4.php';
        foreach ($map as $namespace => $path) {
            $loader->setPsr4($namespace, $path);
        }
        //$map = array('App\\Console\\Commands\\Inspire' => $baseDir . '/app/Console/Commands/Inspire.php',....)
        $classMap = require __DIR__ . '/autoload_classmap.php';
        if ($classMap) {
            $loader->addClassMap($classMap);
        }

        $loader->register(true);
        
        //$includeFiles = array('667aeda72477189d0494fecd327c3641' => $vendorDir . '/symfony/var-dumper/Resources/functions/dump.php',...)
        $includeFiles = require __DIR__ . '/autoload_files.php';
        foreach ($includeFiles as $fileIdentifier => $file) {
            composerRequiree076afe45cb086ab2da8c82077e278c9($fileIdentifier, $file);
        }

        return $loader;
    }

}

function composerRequiree076afe45cb086ab2da8c82077e278c9($fileIdentifier, $file) {
    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
        require $file;
        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
    }
}
